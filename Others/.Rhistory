table3 <- kable(by_Star_top10, caption = "The Number of Reviews per Star Per Top10 User") %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
table3
ggplot(data = avg_Review_top10, mapping = aes(x = user_id ,y = `Average Review Stars`, fill = `Review Count`)) +
geom_col() +
labs(x = "User ID", title = "The Bar Chart Summarises the Average Review Stars by Top 10 Users")
ggplot(data = by_Star_top10, mapping = aes(x = stars, y = `Total Reviews per Star per Top10 User`)) +
geom_line() +
geom_smooth(se = FALSE, method = 'lm', span = 1) +
facet_wrap(~ user_id, nrow = 3)
# separate the maindata into 2 groups of users
## Reviews Before2020 (including 31.12.2019)
reviews_bf2020 <- maindata %>%
filter(member_since < as.Date('2020-01-01')) %>%
mutate("Length of text" = nchar(text)) # Count the length of each review
## Reviews After2020 (including 01.01.2020)
reviews_af2020 <- maindata %>%
filter(member_since >= as.Date('2020-01-01')) %>%
mutate("Length of text" = nchar(text)) # Count the length of each review
# Identify rating behaviour metrics - average review stars, average number of reviews per user, and the length of the reviews
## The Review Count, Average Review Star per User and Average Length of Reviews per user who joined before 2020.
behaviour_bf2020 <- reviews_bf2020 %>%
group_by(user_id)  %>%
summarise("Review Count" = n(),
"Average Review Star per User" = round(mean(stars),3),
"Average Length of Reviews" = round(mean(`Length of text`),3))
## The Average Number of Reviews, Average Review Star and Average Length of Reviews of the whole group (Users before 2020)
avg_Figure_bf2020 <- behaviour_bf2020 %>%
summarise("Average Number of Reviews" = round(mean(`Review Count`),3),
"Average Review Star" = round(mean(`Average Review Star per User`),3),
"Average Length of Reviews" = round(mean(`Average Length of Reviews`),3))
## The Review Count, Average Review Star and Average Length of Reviews per user who joined before 2020.
behaviour_af2020 <- reviews_af2020 %>%
group_by(user_id)  %>%
summarise("Review Count" = n(), "Average Review Star per User" = round(mean(stars),3), "Average Length of Reviews" = round(mean(`Length of text`),3))
## The Average Number of Reviews, Average Review Star and Average Length of Reviews of the whole group (Users before 2020)
avg_Figure_af2020 <- behaviour_af2020 %>%
summarise("Average Number of Reviews" = round(mean(`Review Count`),3),
"Average Review Star" = round(mean(`Average Review Star per User`),3),
"Average Length of Reviews" = round(mean(`Average Length of Reviews`),3))
table4 <- avg_Figure_bf2020 %>%
bind_rows(avg_Figure_af2020) %>% #combine 2 dataframes
mutate(Group = c("Before 2020", "After 2020")) %>% #create a new column to name the group
relocate(Group) # move the column Group to the most left
kable(table4, caption = "The summary of average figures of 2 groups: Before and After 2020", digits = 3) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
# Analyst the length of reviews by stars by using review_bf2020 and review_af2020 data.
## The Number of Review by Star and The Average Length of Review by Star in Group Before 2020
by_Star_bf2020 <- reviews_bf2020 %>%
group_by(stars) %>%
summarise("The Number of Review" = n(), "The Average Lenght of Review" = round(mean(`Length of text`),3)) %>%
mutate(Group = "Before 2020") %>%
relocate(Group)
by_Star_bf2020
## The Number of Review by Star and The Average Length of Review by Star in Group After 2020
by_Star_af2020 <- reviews_af2020 %>%
group_by(stars) %>%
summarise("The Number of Review" = n(), "The Average Lenght of Review" = round(mean(`Length of text`),3)) %>%
mutate(Group = "After 2020") %>%
relocate(Group)
by_Star_af2020
## Visualise by Star
# Combine 2 groups
by_Star <- by_Star_bf2020 %>%
bind_rows(by_Star_af2020)
ggplot(data = by_Star, mapping = aes(x = stars, y= `The Number of Review`, fill = Group)) +
geom_col() +
labs(title = "The Distribution of Reviews by Star in 2 groups", x = "Star", y = "The Number of Review", fill = "Group")
ggplot(data = by_Star, mapping = aes(x = stars, y= `The Number of Review`, fill = Group)) +
geom_col(position = "dodge") +
labs(title = "The Distribution of Reviews by Star in 2 groups", x = "Star", y = "The Number of Review", fill = "Group")
ggplot(data = by_Star, mapping = aes(x = stars, y= `The Average Lenght of Review`, fill = Group)) +
geom_col(position = "dodge") +
labs(title = "The Distribution of Reviews by Star in 2 groups", x = "Star", y = "The Average Length of Review", fill = "Group")
## Visualise by Star
# Combine 2 groups
by_Star <- by_Star_bf2020 %>%
bind_rows(by_Star_af2020)
ggplot(data = by_Star, mapping = aes(x = stars, y= `The Number of Review`, fill = Group)) +
geom_col() +
labs(title = "The Distribution of Reviews by Star in 2 groups", x = "Star", y = "The Number of Review", fill = "Group")
ggplot(data = by_Star, mapping = aes(x = stars, y= `The Number of Review`, fill = Group)) +
geom_col(position = "dodge") +
labs(title = "The Distribution of Reviews by Star in 2 groups", x = "Star", y = "The Number of Review", fill = "Group")
ggplot(data = by_Star, mapping = aes(x = stars, y= `The Average Lenght of Review`, fill = Group)) +
geom_col(position = "dodge") +
labs(title = "The Distribution of Reviews by Star in 2 groups", x = "Star", y = "The Average Length of Review", fill = "Group")
table1 <- kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
View(table)
## Turn the table into a kable
num <- kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
save(num)
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center") %>%
save_kable("Table 1")
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center") %>%
save_kable("Table 1.png")
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center") %>%
save_kable("Table 1.gtml")
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center") %>%
save_kable("Table 1.html")
# Create table to turn it into a kable
user_group <- c("Veteran","Intermediate","New") # This will becomes the column names for the table
value_Users <- c(unique_users_V, unique_users_I, unique_users_N)
value_Stars <- c(avg_Review_Stars_V, avg_Review_Stars_I, avg_Review_Stars_N)
value_Reviews <- c(avg_Review_V, avg_Review_I, avg_Review_N)
table <- data.frame(value_Users, value_Stars, value_Reviews, row.names = user_group)
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
View(calculated_PGA)
rm(list = ls()) # cleaning the environment
PGA <- read.csv("businessesPGA.csv")
PGB <- read.csv("businessesPGB.csv")
review <- read.csv("reviews.csv")
users <- read.csv("users.csv")
# install.packages('tidyverse')
library('tidyverse')
library(knitr)
# install.packages("kableExtra") #
library(kableExtra)
# for knitting
#install.packages("tinytex")
#tinytex::install_tinytex()
# Data cleaning and grouping
## Transform data type of member_since variable from chr into date.
users$member_since <- as.Date(users$member_since)
## Cleaning data - review
review <- review %>%
mutate(user_id = str_trim(user_id)) %>% #remove any empty spaces
filter(user_id != "") # remove any empty strings
## Cleaning data - users
users <- users %>%
mutate(user_id = str_trim(user_id)) %>% #remove any empty spaces
filter(user_id != "") # remove any empty strings
## group review and users into 1 group - maindata
maindata <- review %>%
left_join(users, by = c("user_id" = "user_id")) %>% #fill more details of users into the reviews data
drop_na(review_id, business_id, member_since, user_id) %>% # eliminate NA in review_id, business_id, member_since and user_id columns
select(-review_count, -average_stars) # eliminate unused columns
# Classify the review from 3 groups of users
## The reviews from Veteran users
reviewOfVeteran <- maindata %>%
filter(member_since < as.Date('2017-01-01'))
# The reviews from Intermediate users
reviewOfIntermediate <- maindata %>%
filter(between(member_since, as.Date('2017-01-01'), as.Date('2022-12-31')))
# The reviews from New users
reviewOfNew <- maindata %>%
filter(member_since > as.Date('2022-12-31'))
# The numbers of unique users per group
## group Veteran
Veteran <- reviewOfVeteran %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) # unique Veteran users from the review data
unique_users_V <- as.numeric(count(Veteran)) # The numbers of Veteran users
## group Intermediate
Intermediate <- reviewOfIntermediate %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) # unique Intermediate users from the review data
unique_users_I <- as.numeric(count(Intermediate)) # The numbers of Intermediate users
## group New
New <- reviewOfNew %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) # unique New users from the review data
unique_users_N <- as.numeric(count(New)) # The numbers of New users
# The average review stars per group
## average review stars from Veteran
avg_Review_Stars_V <- round(mean(reviewOfVeteran$stars), 3)
## average review stars from Intermediate
avg_Review_Stars_I <- round(mean(reviewOfIntermediate$stars), 3)
## average review stars from New
avg_Review_Stars_N <- round(mean(reviewOfNew$stars), 3)
# The average number of reviews per user in each group
## average number of reviews per user in Veteran
avg_Review_V <- round(mean(Veteran$review_count), 3)
## average number of reviews per user in Intermediate
avg_Review_I <- round(mean(Intermediate$review_count), 3)
## average number of reviews per user in New
avg_Review_N <- round(mean(New$review_count), 3)
# Create table to turn it into a kable
user_group <- c("Veteran","Intermediate","New") # This will becomes the column names for the table
value_Users <- c(unique_users_V, unique_users_I, unique_users_N)
value_Stars <- c(avg_Review_Stars_V, avg_Review_Stars_I, avg_Review_Stars_N)
value_Reviews <- c(avg_Review_V, avg_Review_I, avg_Review_N)
table <- data.frame(value_Users, value_Stars, value_Reviews, row.names = user_group)
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
# Bar chart to visual the overall view of the Average Review Stars by the User Age Group
Figure_1 <- ggplot(data = table, mapping = aes(x = user_group, y = value_Stars, fill = user_group)) + geom_bar(stat = "identity", width = 0.6) + labs(title = "The Average Review Stars by User Age Group", x = "Age Group", y = "Average Review Stars", fill = "Age Group") + coord_flip()
Figure_1
# Using points to indicates the difference between figures
Figure_2 <- ggplot(data = table, mapping = aes(x = user_group, y = value_Stars)) +
labs(title = "The Average Review Stars by User Age Group", x = "Age Group", y = "Average Review Stars", fill = "Age Group") + geom_point(size = 4, mapping = aes(col = user_group)) +
coord_flip() +
theme_minimal()
Figure_2
# Clean PGA and PGB datasets
## There are empty space/string in state in PGA and PGB. They need to be removed before continue
PGA <- PGA %>%
mutate(state = str_trim(state)) %>% #remove any empty spaces
filter(state != "") %>% # remove any empty strings in state column
filter(business_id != "") # remove any empty strings in state column
PGB <- PGB %>%
mutate(state = str_trim(state)) %>% #remove any empty spaces
filter(state != "") %>% # remove any empty strings
filter(business_id != "") # remove any empty strings in state column
# Create 2 data from maindata, 1 with only PGA businesses and 1 with only PGB businesses
mainPGA <- maindata %>%
inner_join(PGA, by = c("business_id" = "business_id")) %>% # join 2 groups using business_id
select(-c(stars.y,review_count,categories, X, business_group, name.y,city)) # eliminate any unused columns
mainPGB <- maindata %>%
inner_join(PGB, by = c("business_id" = "business_id")) %>% # join 2 groups using business_id
select(-c(stars.y,review_count,categories, X, business_group, name.y,city)) # eliminate any unused columns
calculated_PGA <- mainPGA %>%
group_by(state) %>%
summarise("Average Review Star" = round(mean(stars.x),3), # calculate 3 values
"Number of Reviews" = n_distinct(review_id),
"Number of Unique Users" = n_distinct(user_id)) %>%
mutate("The Proportion of Unique Users" = `Number of Unique Users`/sum(`Number of Unique Users`)) %>% # calculate the distribution of users in each state
arrange(state) # reorder the State variable in ascending order
calculated_PGA
# calculate figures from mainPGA
calculated_PGA <- mainPGA %>%
group_by(state) %>%
summarise("Average Review Star" = round(mean(stars.x),3), # calculate 3 values
"Number of Reviews" = n_distinct(review_id),
"Number of Unique Users" = n_distinct(user_id)) %>%
mutate("The Proportion of Unique Users" = `Number of Unique Users`/sum(`Number of Unique Users`)) %>% # calculate the distribution of users in each state
arrange(state) # reorder the State variable in ascending order
calculated_PGA
# calculate figures from mainPGB
calculated_PGB <- mainPGB %>%
group_by(state) %>%
summarise("Average Review Star" = round(mean(stars.x),3), # calculate 3 values
"Number of Reviews" = n_distinct(review_id),
"Number of Unique Users" = n_distinct(user_id)) %>%
mutate("The Proportion of Unique Users" = `Number of Unique Users`/sum(`Number of Unique Users`)) %>% # calculate the distribution of users in each state
arrange(state) # reorder the State variable in ascending order
calculated_PGB
# combine 2 groups mainPGA and mainPGB for the comparison and visualisation purposes.
## add a column to know it is from PGA
calculated_PGA <- calculated_PGA %>%
mutate("Group" = "PGA")
## add a column to know it is from PGB
calculated_PGB <- calculated_PGB %>%
mutate("Group" = "PGB")
## Then, combine 2 groups so that we have a data set with category in advance
joinPGAPGB <- calculated_PGA %>%
bind_rows(calculated_PGB)
## Visualise by Average Review Star
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Average Review Star`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Average Review Star", title = "Comparing The Average Review Star by State between PGA and PGB")
## Visualise by Number of Reviews
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Number of Reviews`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Number of Reviews", title = "Comparing The Number of Reviews by State between PGA and PGB")
## Visualise by Number of Unique Users
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Number of Unique Users`, fill = Group)) +
geom_col(position = "dodge", width = 0.5) +
geom_line(aes(group = Group, color =Group)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
labs(y = "The Number of Unique Users", title = "Comparing The Number of Unique Users by State between PGA and PGB")
## Visualise by Proportion of Unique Users by State
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `The Proportion of Unique Users`, fill = Group)) +
geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
labs(y = "The Proportion of Unique Users by State", title = "Comparing The Proportion of Unique Users by State between PGA and PGB")
## Visualise by Average Review Star
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Average Review Star`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Average Review Star", title = "Comparing The Average Review Star by State between PGA and PGB")
# combine 2 groups mainPGA and mainPGB for the comparison and visualisation purposes.
## add a column to know it is from PGA
calculated_PGA <- calculated_PGA %>%
mutate("Group" = "PGA")
## add a column to know it is from PGB
calculated_PGB <- calculated_PGB %>%
mutate("Group" = "PGB")
## Then, combine 2 groups so that we have a data set with category in advance
joinPGAPGB <- calculated_PGA %>%
bind_rows(calculated_PGB)
## Visualise by Average Review Star
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Average Review Star`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Average Review Star", title = "Comparing The Average Review Star by State between PGA and PGB")
## Visualise by Number of Reviews
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Number of Reviews`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Number of Reviews", title = "Comparing The Number of Reviews by State between PGA and PGB")
## Visualise by Number of Unique Users
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Number of Unique Users`, fill = Group)) +
geom_col(position = "dodge", width = 0.5) +
geom_line(aes(group = Group, color =Group)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
labs(y = "The Number of Unique Users", title = "Comparing The Number of Unique Users by State between PGA and PGB")
## Visualise by Proportion of Unique Users by State
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `The Proportion of Unique Users`, fill = Group)) +
geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
labs(y = "The Proportion of Unique Users by State", title = "Comparing The Proportion of Unique Users by State between PGA and PGB")
# For those top 10 users, calculate their average review stars.
avg_Review_top10 <- reviews_of_Top10 %>%
group_by(user_id) %>%
summarise("Average Review Stars" = round(mean(stars), 3),
"Review Count" = n_distinct(review_id)) %>%
arrange(desc(`Review Count`))
rm(list = ls()) # cleaning the environment
PGA <- read.csv("businessesPGA.csv")
PGB <- read.csv("businessesPGB.csv")
review <- read.csv("reviews.csv")
users <- read.csv("users.csv")
# install.packages('tidyverse')
library('tidyverse')
library(knitr)
# install.packages("kableExtra") #
library(kableExtra)
# for knitting
#install.packages("tinytex")
#tinytex::install_tinytex()
# Data cleaning and grouping
## Transform data type of member_since variable from chr into date.
users$member_since <- as.Date(users$member_since)
## Cleaning data - review
review <- review %>%
mutate(user_id = str_trim(user_id)) %>% #remove any empty spaces
filter(user_id != "") # remove any empty strings
## Cleaning data - users
users <- users %>%
mutate(user_id = str_trim(user_id)) %>% #remove any empty spaces
filter(user_id != "") # remove any empty strings
## group review and users into 1 group - maindata
maindata <- review %>%
left_join(users, by = c("user_id" = "user_id")) %>% #fill more details of users into the reviews data
drop_na(review_id, business_id, member_since, user_id) %>% # eliminate NA in review_id, business_id, member_since and user_id columns
select(-review_count, -average_stars) # eliminate unused columns
# Classify the review from 3 groups of users
## The reviews from Veteran users
reviewOfVeteran <- maindata %>%
filter(member_since < as.Date('2017-01-01'))
# The reviews from Intermediate users
reviewOfIntermediate <- maindata %>%
filter(between(member_since, as.Date('2017-01-01'), as.Date('2022-12-31')))
# The reviews from New users
reviewOfNew <- maindata %>%
filter(member_since > as.Date('2022-12-31'))
# The numbers of unique users per group
## group Veteran
Veteran <- reviewOfVeteran %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) # unique Veteran users from the review data
unique_users_V <- as.numeric(count(Veteran)) # The numbers of Veteran users
## group Intermediate
Intermediate <- reviewOfIntermediate %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) # unique Intermediate users from the review data
unique_users_I <- as.numeric(count(Intermediate)) # The numbers of Intermediate users
## group New
New <- reviewOfNew %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) # unique New users from the review data
unique_users_N <- as.numeric(count(New)) # The numbers of New users
# The average review stars per group
## average review stars from Veteran
avg_Review_Stars_V <- round(mean(reviewOfVeteran$stars), 3)
## average review stars from Intermediate
avg_Review_Stars_I <- round(mean(reviewOfIntermediate$stars), 3)
## average review stars from New
avg_Review_Stars_N <- round(mean(reviewOfNew$stars), 3)
# The average number of reviews per user in each group
## average number of reviews per user in Veteran
avg_Review_V <- round(mean(Veteran$review_count), 3)
## average number of reviews per user in Intermediate
avg_Review_I <- round(mean(Intermediate$review_count), 3)
## average number of reviews per user in New
avg_Review_N <- round(mean(New$review_count), 3)
# Create table to turn it into a kable
user_group <- c("Veteran","Intermediate","New") # This will becomes the column names for the table
value_Users <- c(unique_users_V, unique_users_I, unique_users_N)
value_Stars <- c(avg_Review_Stars_V, avg_Review_Stars_I, avg_Review_Stars_N)
value_Reviews <- c(avg_Review_V, avg_Review_I, avg_Review_N)
table <- data.frame(value_Users, value_Stars, value_Reviews, row.names = user_group)
## Turn the table into a kable
kable(table, caption = "The summary of average figures by groups", digits = 3, col.names = c("The Numbers of Users", "Average Review Stars", "Average Number of Reviews")) %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
# Bar chart to visual the overall view of the Average Review Stars by the User Age Group
Figure_1 <- ggplot(data = table, mapping = aes(x = user_group, y = value_Stars, fill = user_group)) + geom_bar(stat = "identity", width = 0.6) + labs(title = "The Average Review Stars by User Age Group", x = "Age Group", y = "Average Review Stars", fill = "Age Group") + coord_flip()
Figure_1
# Using points to indicates the difference between figures
Figure_2 <- ggplot(data = table, mapping = aes(x = user_group, y = value_Stars)) +
labs(title = "The Average Review Stars by User Age Group", x = "Age Group", y = "Average Review Stars", fill = "Age Group") + geom_point(size = 4, mapping = aes(col = user_group)) +
coord_flip() +
theme_minimal()
Figure_2
# Clean PGA and PGB datasets
## There are empty space/string in state in PGA and PGB. They need to be removed before continue
PGA <- PGA %>%
mutate(state = str_trim(state)) %>% #remove any empty spaces
filter(state != "") %>% # remove any empty strings in state column
filter(business_id != "") # remove any empty strings in state column
PGB <- PGB %>%
mutate(state = str_trim(state)) %>% #remove any empty spaces
filter(state != "") %>% # remove any empty strings
filter(business_id != "") # remove any empty strings in state column
# Create 2 data from maindata, 1 with only PGA businesses and 1 with only PGB businesses
mainPGA <- maindata %>%
inner_join(PGA, by = c("business_id" = "business_id")) %>% # join 2 groups using business_id
select(-c(stars.y,review_count,categories, X, business_group, name.y,city)) # eliminate any unused columns
mainPGB <- maindata %>%
inner_join(PGB, by = c("business_id" = "business_id")) %>% # join 2 groups using business_id
select(-c(stars.y,review_count,categories, X, business_group, name.y,city)) # eliminate any unused columns
# calculate figures from mainPGA
calculated_PGA <- mainPGA %>%
group_by(state) %>%
summarise("Average Review Star" = round(mean(stars.x),3), # calculate 3 values
"Number of Reviews" = n_distinct(review_id),
"Number of Unique Users" = n_distinct(user_id)) %>%
mutate("The Proportion of Unique Users" = `Number of Unique Users`/sum(`Number of Unique Users`)) %>% # calculate the distribution of users in each state
arrange(state) # reorder the State variable in ascending order
calculated_PGA
# calculate figures from mainPGB
calculated_PGB <- mainPGB %>%
group_by(state) %>%
summarise("Average Review Star" = round(mean(stars.x),3), # calculate 3 values
"Number of Reviews" = n_distinct(review_id),
"Number of Unique Users" = n_distinct(user_id)) %>%
mutate("The Proportion of Unique Users" = `Number of Unique Users`/sum(`Number of Unique Users`)) %>% # calculate the distribution of users in each state
arrange(state) # reorder the State variable in ascending order
calculated_PGB
# combine 2 groups mainPGA and mainPGB for the comparison and visualisation purposes.
## add a column to know it is from PGA
calculated_PGA <- calculated_PGA %>%
mutate("Group" = "PGA")
## add a column to know it is from PGB
calculated_PGB <- calculated_PGB %>%
mutate("Group" = "PGB")
## Then, combine 2 groups so that we have a data set with category in advance
joinPGAPGB <- calculated_PGA %>%
bind_rows(calculated_PGB)
## Visualise by Average Review Star
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Average Review Star`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Average Review Star", title = "Comparing The Average Review Star by State between PGA and PGB")
## Visualise by Number of Reviews
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Number of Reviews`, fill = Group)) + geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
geom_line(aes(group = Group, color =Group)) +
labs(y = "The Number of Reviews", title = "Comparing The Number of Reviews by State between PGA and PGB")
## Visualise by Number of Unique Users
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `Number of Unique Users`, fill = Group)) +
geom_col(position = "dodge", width = 0.5) +
geom_line(aes(group = Group, color =Group)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
labs(y = "The Number of Unique Users", title = "Comparing The Number of Unique Users by State between PGA and PGB")
## Visualise by Proportion of Unique Users by State
ggplot(data = joinPGAPGB, mapping = aes(x = state, y = `The Proportion of Unique Users`, fill = Group)) +
geom_col(position = "dodge", width = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom") + # Rotate x-axis labels
labs(y = "The Proportion of Unique Users by State", title = "Comparing The Proportion of Unique Users by State between PGA and PGB")
# Identify the top 10 users using maindata
top10 <- maindata %>%
group_by(user_id) %>%
summarise(review_count = n_distinct(review_id)) %>% #count the total reviews per unique user
arrange(desc(review_count)) %>%  #soft review_count from the biggest to the smallers
slice_head(n = 10) # take the top 10
top10
# Use this list to identify their reviews in the maindata
reviews_of_Top10 <- maindata %>%
semi_join(top10, by = "user_id")
# For those top 10 users, calculate their average review stars.
avg_Review_top10 <- reviews_of_Top10 %>%
group_by(user_id) %>%
summarise("Average Review Stars" = round(mean(stars), 3),
"Review Count" = n_distinct(review_id)) %>%
arrange(desc(`Review Count`))
table2 <- kable(avg_Review_top10, caption = "The summary of average figures of top 10: Before and After 2020") %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
table2
# Further analysis is conducted to identify the pattern of each users' behaviours
by_Star_top10 <- reviews_of_Top10 %>%
group_by(user_id, stars) %>%
summarise("Total Reviews per Star per Top10 User" = n())
table3 <- kable(by_Star_top10, caption = "The Number of Reviews per Star Per Top10 User") %>%
kable_styling(bootstrap_options = c("bordered"), position = "center")
table3
ggplot(data = avg_Review_top10, mapping = aes(x = user_id ,y = `Average Review Stars`, fill = `Review Count`)) +
geom_col() +
labs(x = "User ID", title = "The Bar Chart Summarises the Average Review Stars by Top 10 Users")
ggplot(data = by_Star_top10, mapping = aes(x = stars, y = `Total Reviews per Star per Top10 User`)) +
geom_line() +
geom_smooth(se = FALSE, method = 'lm', span = 1) +
facet_wrap(~ user_id, nrow = 3)
